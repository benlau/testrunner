#ifndef TESTRUNNER_H
#define TESTRUNNER_H

#include <QObject>
#include <QStringList>

/// QTestLib application runner
/** TestRunner is a tool to execute multiple unit test program
  using QTestLib framework. It will run the test program one
  by one and record their testing result and report the summary
  at the end.

  The QTestLib framework, provided by Nokia, is a tool for unit
  testing Qt based applications and libraries. The framework is
  very easy to use and sutiable for TDD like development approach.

  To make a test program, you just have to create the an unit test
  project in Qt Creator.

  However, when the no. of test case growth, you may break down
  the test case into few different classes. But the code template
  generated by Qt Creator combined everything into a single
  source file. It do not support to run multiple test classes.
  There have no a direct way to run all the test program
  in your project. You have to spend extra time to reorganize
  the source file for this purpose. It is quite troublesome.

  TestRunner provides a mechanism to exeucte multiple test program
  without any change of the program's source code. The result
  for each test program will be recorded and combined to a
  summary report.

  License : New BSD

  (I don't think you will bundle this code with your application binary..
  So you may free to do anything on this class)

  @author Ben Lau
 */

class TestRunner : public QObject
{
    Q_OBJECT
public:
    /// Default constructor
    explicit TestRunner(QObject *parent = 0);

    /// Run a test program built with QTest framework
    /**
      @param executable The executable binary program
      @param args Extra argument pass to the program
      @return TRUE if the executable is run successfully

      It will execute the program and record the final result.
     */
    bool run(QString executable,QStringList args = QStringList());

    /// The summary report
    /** It will output the total no. of test cases passed ,
      failed and skipped for the test program executed by
      run()
     */
    void report();

    /// No. of test case passed
    int passed();

    /// No. of test case failed
    int failed();

    /// No. of test case skipped
    int skipped();

signals:

public slots:

private slots:
    /// Parse the output from the running test program
    void parse();

private:

    /// no. of test passed
    int m_passed;

    /// no. of test failed
    int m_failed;

    /// no. of test skipped
    int m_skipped;

    bool findResult;
};

#endif // TESTRUNNER_H
